#!/bin/bash
#
# Rudushi - Your AI Assistant
# Main entry point for all Rudushi operations
#

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Banner
clear
cat << 'EOF'
╔══════════════════════════════════════════════════════════════════════╗
║                                                                      ║
║   🤖 RUDUSHI - Your AI Assistant 🤖                                  ║
║                                                                      ║
║   Lightweight Language Model for Mobile Devices                      ║
║                                                                      ║
╚══════════════════════════════════════════════════════════════════════╝
EOF

echo -e "${CYAN}${BOLD}"
echo "  Welcome to Rudushi!"
echo -e "${NC}"
echo ""

# Configuration
RUDUSHI_DIR="$HOME/rudushi"
RUDUSHI_MODEL_DIR="$HOME/rudushi_model"
RUDUSHI_CHAT="$RUDUSHI_DIR/rudushi_chat.py"
LLAMA_BIN="$HOME/llama.cpp/build/bin/llama-cli"

# Check if model exists
list_models() {
    echo -e "${BLUE}Available models:${NC}"
    if [ -d "$RUDUSHI_MODEL_DIR" ]; then
        ls -lh "$RUDUSHI_MODEL_DIR"/*.gguf 2>/dev/null | awk '{print "  - " $9 " (" $5 ")"}'
    else
        echo "  No models found"
    fi
    echo ""
}

# Show menu
show_menu() {
    echo -e "${CYAN}${BOLD}What would you like to do?${NC}"
    echo ""
    echo "  1)  Chat with Rudushi (interactive)"
    echo "  2)  Quick generation (one prompt)"
    echo "  3)  Download a model"
    echo "  4)  List downloaded models"
    echo "  5)  Start fine-tuning setup"
    echo "  6)  View conversation history"
    echo "  7)  Clear conversation history"
    echo "  8)  Run benchmark"
    echo "  9)  View documentation"
    echo "  0)  Exit"
    echo ""
}

# Chat with Rudushi
chat_with_rudushi() {
    echo -e "${GREEN}Starting Rudushi Chat...${NC}"
    echo ""

    # Check for models
    if [ ! -d "$RUDUSHI_MODEL_DIR" ] || [ -z "$(ls -A $RUDUSHI_MODEL_DIR/*.gguf 2>/dev/null)" ]; then
        echo -e "${YELLOW}⚠️  No models found${NC}"
        echo "Please download a model first (option 3)"
        return
    fi

    # List models and ask user to choose
    echo -e "${BLUE}Select a model:${NC}"
    models=("$RUDUSHI_MODEL_DIR"/*.gguf)
    if [ ${#models[@]} -eq 0 ] || [ ! -e "${models[0]}" ]; then
        echo -e "${YELLOW}No models available${NC}"
        return
    fi

    for i in "${!models[@]}"; do
        size=$(stat -f%z "${models[$i]}" 2>/dev/null || stat -c%s "${models[$i]}" 2>/dev/null || echo "?")
        size_mb=$(echo "scale=1; $size / 1024 / 1024" | bc 2>/dev/null || echo "?")
        echo "  $((i+1))) $(basename "${models[$i]}") (${size_mb}MB)"
    done

    echo ""
    read -p "Select model [1-${#models[@]}]: " choice

    if [ "$choice" -ge 1 ] && [ "$choice" -le ${#models[@]} ]; then
        selected_model="${models[$((choice-1))]}"
        echo -e "${GREEN}Using model: $(basename "$selected_model")${NC}"
        echo ""

        # Run chatbot
        python3 "$RUDUSHI_CHAT" --model "$selected_model"
    else
        echo -e "${RED}Invalid choice${NC}"
    fi
}

# Quick generation
quick_generation() {
    echo -e "${GREEN}Quick Generation Mode${NC}"
    echo ""
    echo -e "${CYAN}Enter your prompt:${NC}"
    read -r prompt

    if [ -z "$prompt" ]; then
        echo -e "${RED}No prompt provided${NC}"
        return
    fi

    # List models
    models=("$RUDUSHI_MODEL_DIR"/*.gguf)
    if [ ${#models[@]} -eq 0 ] || [ ! -e "${models[0]}" ]; then
        echo -e "${YELLOW}No models available${NC}"
        return
    fi

    # Use first model
    selected_model="${models[0]}"
    echo -e "${GREEN}Using model: $(basename "$selected_model")${NC}"
    echo ""

    # Generate
    "$LLAMA_BIN" -m "$selected_model" -p "$prompt" -n 128 --temp 0.7 --mlock
}

# Download model
download_model() {
    echo -e "${GREEN}Model Download${NC}"
    echo ""
    "$RUDUSHI_DIR/05_download_model.sh"
}

# List models
list_models_menu() {
    echo -e "${GREEN}Your Models${NC}"
    echo ""
    list_models
}

# Fine-tuning setup
fine_tuning_setup() {
    echo -e "${GREEN}Fine-tuning Setup${NC}"
    echo ""
    echo -e "${CYAN}This will set up the environment for fine-tuning Rudushi${NC}"
    echo ""
    echo "Options:"
    echo "  1) View fine-tuning guide"
    echo "  2) Prepare fine-tuning environment (requires GPU)"
    echo "  3) Run fine-tuning in Google Colab"
    echo "  4) Convert fine-tuned model to GGUF"
    echo "  5) Upload fine-tuned model to Hugging Face"
    echo "  0) Back to main menu"
    echo ""
    read -p "Select option [0-5]: " choice

    case $choice in
        1)
            echo ""
            echo -e "${CYAN}Fine-tuning Guide:${NC}"
            cat << 'GUIDE'

To fine-tune Rudushi on your own data:

1. GPU Environment Required
   - Use Google Colab (free T4 GPU)
   - Or any NVIDIA GPU with 8GB+ VRAM

2. Steps:
   a) Run: python3 01_fine_tune_tinyllama.py
   b) Adjust dataset and parameters
   c) Wait for training to complete (1-4 hours)
   d) Run: python3 02_convert_to_gguf.py
   e) Run: python3 03_upload_to_hf.py --token YOUR_TOKEN

3. Your Custom Model:
   - Will be saved to: fine_tuned_tinyllama/
   - Converted to GGUF: gguf_models/model-Q4_K_M.gguf
   - Uploaded to: megharudushi/Rudushi

GUIDE
            read -p "Press Enter to continue..."
            ;;
        2)
            echo ""
            echo -e "${YELLOW}Fine-tuning requires a GPU environment${NC}"
            echo -e "${CYAN}Recommended: Google Colab (free)${NC}"
            echo ""
            echo "To run in Colab:"
            echo "1. Go to: https://colab.research.google.com"
            echo "2. Upload: 01_fine_tune_tinyllama.py"
            echo "3. Run the notebook"
            echo ""
            ;;
        3)
            echo ""
            echo -e "${GREEN}Google Colab Setup${NC}"
            echo ""
            echo "Steps:"
            echo "1. Open: https://colab.research.google.com"
            echo "2. Create new notebook"
            echo "3. Upload and run: 01_fine_tune_tinyllama.py"
            echo ""
            echo "The script will:"
            echo "- Install Unsloth and dependencies"
            echo "- Load TinyLlama-1.1B"
            echo "- Fine-tune on Alpaca dataset"
            echo "- Save your custom Rudushi model"
            ;;
        4)
            echo ""
            echo -e "${GREEN}Converting Fine-tuned Model${NC}"
            echo ""
            if [ -d "fine_tuned_tinyllama" ]; then
                python3 02_convert_to_gguf.py
            else
                echo -e "${YELLOW}No fine-tuned model found${NC}"
                echo "Run fine-tuning first (option 2)"
            fi
            ;;
        5)
            echo ""
            echo -e "${GREEN}Uploading to Hugging Face${NC}"
            echo ""
            if [ -d "fine_tuned_tinyllama" ]; then
                read -p "Enter your Hugging Face token: " token
                python3 03_upload_to_hf.py --token "$token"
            else
                echo -e "${YELLOW}No fine-tuned model found${NC}"
                echo "Run fine-tuning and conversion first"
            fi
            ;;
        0)
            return
            ;;
        *)
            echo -e "${RED}Invalid option${NC}"
            ;;
    esac
}

# View history
view_history() {
    if [ -f "rudushi_history.json" ]; then
        echo -e "${GREEN}Conversation History${NC}"
        echo ""
        cat rudushi_history.json | python3 -m json.tool 2>/dev/null || cat rudushi_history.json
    else
        echo -e "${YELLOW}No conversation history found${NC}"
    fi
    echo ""
    read -p "Press Enter to continue..."
}

# Clear history
clear_history() {
    if [ -f "rudushi_history.json" ]; then
        read -p "Are you sure? [y/N]: " confirm
        if [ "$confirm" = "y" ] || [ "$confirm" = "Y" ]; then
            rm -f rudushi_history.json
            echo -e "${GREEN}✅ History cleared${NC}"
        fi
    else
        echo -e "${YELLOW}No history to clear${NC}"
    fi
    echo ""
    read -p "Press Enter to continue..."
}

# Run benchmark
run_benchmark() {
    echo -e "${GREEN}Running Benchmark${NC}"
    echo ""

    models=("$RUDUSHI_MODEL_DIR"/*.gguf)
    if [ ${#models[@]} -eq 0 ] || [ ! -e "${models[0]}" ]; then
        echo -e "${YELLOW}No models available${NC}"
        return
    fi

    selected_model="${models[0]}"
    echo -e "${GREEN}Benchmarking: $(basename "$selected_model")${NC}"
    echo ""

    echo "Generating 100 tokens..."
    time "$LLAMA_BIN" -m "$selected_model" -p "Explain artificial intelligence" -n 100 --mlock 2>&1 | tee benchmark.log

    echo ""
    echo -e "${GREEN}Results saved to: benchmark.log${NC}"
    echo ""
    read -p "Press Enter to continue..."
}

# View documentation
view_docs() {
    echo -e "${GREEN}Documentation${NC}"
    echo ""
    echo "Available documentation:"
    echo "  1) README.md (Complete guide)"
    echo "  2) SETUP_STATUS.md (Your device setup)"
    echo "  3) QUICK_REFERENCE.txt (Command reference)"
    echo "  4) Project summary (Technical details)"
    echo "  0) Back"
    echo ""
    read -p "Select option [0-4]: " choice

    case $choice in
        1)
            [ -f "README.md" ] && cat README.md || echo "README.md not found"
            ;;
        2)
            [ -f "SETUP_STATUS.md" ] && cat SETUP_STATUS.md || echo "SETUP_STATUS.md not found"
            ;;
        3)
            [ -f "QUICK_REFERENCE.txt" ] && cat QUICK_REFERENCE.txt || echo "QUICK_REFERENCE.txt not found"
            ;;
        4)
            [ -f "PROJECT_SUMMARY.md" ] && cat PROJECT_SUMMARY.md || echo "PROJECT_SUMMARY.md not found"
            ;;
        0)
            return
            ;;
    esac
    echo ""
    read -p "Press Enter to continue..."
}

# Main loop
while true; do
    show_menu
    read -p "Enter your choice [0-9]: " choice
    echo ""

    case $choice in
        1) chat_with_rudushi ;;
        2) quick_generation ;;
        3) download_model ;;
        4) list_models_menu ;;
        5) fine_tuning_setup ;;
        6) view_history ;;
        7) clear_history ;;
        8) run_benchmark ;;
        9) view_docs ;;
        0)
            echo -e "${GREEN}👋 Thanks for using Rudushi!${NC}"
            exit 0
            ;;
        *)
            echo -e "${RED}Invalid choice${NC}"
            ;;
    esac
    echo ""
done
